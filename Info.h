#pragma once

//今回作りたいもの
//
//・GridクラスとUnitクラス(を継承したBulletクラス) ※20章
//・Gridクラスの各セルが持つデータのデータ型は、list<Unit*>
//・この双方向リストに対して、Unitデータの追加・削除できるようにする。
//・Unitデータはオブジェクトプール(※19章)から持ってくる。
//・Unit型の配列をlist<Unit*>でつなぎ合わせて未使用リストを作り、Poolクラスで管理する。
//
//※Poolクラスの機能をGridクラスに統合しても良い。
//
//必要な実装
//・Pool::Pool()		未使用リストの初期化処理
//・Pool::Create(…)	新規データの作成処理(未使用リストからUnitデータをひとつGridクラスに登録する)
//テキストと必要な引数が異なるので注意すること。
//・Pool::add(Unit*)	未使用Unitデータを未使用リストに追加する処理
//
//・Unit::init(…)	メンバー変数の初期化処理
//前後メンバーへのポインタは不要
//・Unit::update()	移動処理・グリッドへの再登録処理。テキストではmove()関数
//・Unit::draw()		キャラクタ(今回は弾)の表示処理
//
//・Grid::add(Unit*)	セルにUnitを登録する処理
//・Grid::remove(Unit*)	P.360のmove()関数内の、データを取り除く処理を関数化する。
//・Grid::update(…)	各Unitデータのアップデート処理 & 消えたUnitを未使用リストに戻す処理
//テキストではPool::animate()関数、Grid::handleCell()、Grid::move()関数
//・Grid::draw()		各Unitデータのdraw()関数を呼び出す処理
//・Grid::hitCheck(Unit*)	自キャラとセル内のUnitとの当たり判定チェック
// class Grid{
// 
// 
// }
// 
//
//その他、GetterやSetter関数も、必要があれば実装すること。



// 演習
// 
// [課題A]
// 2Dの空間分割(格子)の管理プログラムを作ろう
// 
// 1.弾をランダムに500個配置し、ゆっくりと任意の方向に移動させる。画面端で完全弾性衝突する。
// 2.画面を1280x960とし、64x64ドットに格子分割する。
// 3.格子を管理するGridクラスと、弾を格納するUnitクラスの配列を用意する。
// 4.格子はDrawBox関数かDrawLine関数を使用して画面に描画する。
// 5.弾は8x8ドット、自キャラは16x16ドットとする。
// 6.弾を格子に持たせる、移動時に所属格子を更新するなどの処理を実装する。
// 7.自キャラと弾の当たり判定を実装する。当たったら弾が消えるようにする。弾を取れると考える。
// 8.隣接格子内の弾との判定も実装する。
// 
// [課題B]
// レイシュートを実装する。
// 
// 1.マウスで２点をクリックすると、２点間の線分を描画する。
// 2.線分についてレイシュート処理を行い、判定対象となった格子を塗りつぶす。
// 3.線分と点との当たり判定をチェックし、当たった弾を消す。
// 4.当たり判定チェックは１フレームだけ行い、線分は60フレーム後に消去する。格子の塗りつぶしも解除する。
// 5.２点のクリック指定は、何度でもできるようにする。

